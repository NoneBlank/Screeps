var roleRepairer = 
{
    run: function(creep) 
    {
        //---- –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ --------------//
        //creep.memory.workerMode = -1;
        //---- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ ----------------//
        //console.log(creep.memory.workerMode);
        //-------------------------------------//
        
        //---- –ü—Ä–∏ —Å–ø–∞–≤–Ω–µ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º 0 (–¥–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤) ----//
        if(creep.spawning)
        {
            creep.memory.workerMode = 0;
        }
        
        //---- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ —Å–º–µ—Ä—Ç–∏ ----//
        if(creep.ticksToLive < 10)
        {
            creep.say('Im done‚ò†Ô∏èÔ∏è');
        }
        
        //---- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ ----//
        switch(creep.memory.workerMode)
        {
            case 0: //–î–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
                if(creep.carry.energy < creep.carryCapacity)
				{
					//---- –î–æ–±—ã—á–∞ –∏–∑ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ----//
                    var source = creep.pos.findClosestByRange(FIND_SOURCES_ACTIVE);
                    if(creep.harvest(source) == ERR_NOT_IN_RANGE) 
                    {
                        creep.moveTo(source, {visualizePathStyle: {stroke: '#ffaa00'}}); 
                        creep.say('‚õèÔ∏è');
                    }
				}
				else
				{
					creep.memory.workerMode = 1;
				}
            break;
            
            case 1: //–†–µ–º–æ–Ω—Ç –¥–æ—Ä–æ–≥
                if(creep.carry.energy > 0)
				{
                    var roadToRepair = creep.pos.findClosestByRange(FIND_STRUCTURES, {filter: (structure) => {return (structure.structureType == STRUCTURE_ROAD) && (structure.hits < structure.hitsMax);}});
                    if(roadToRepair)
                    {
                        if (creep.repair(roadToRepair) == ERR_NOT_IN_RANGE)
                        {
                            creep.moveTo(roadToRepair, {visualizePathStyle: {stroke: '#ffffff'}});
                            creep.say('üîß');
                        }
                    }
                    else
                    {
                    creep.memory.workerMode = 2;
                    }
				}
                
				else
				{
					creep.memory.workerMode = 0;
				}
            break;
            
            case 2: //–†–µ–º–æ–Ω—Ç —Å—Ç–µ–Ω
                if(creep.carry.energy > 0)
				{
                    var wallToRepair = creep.pos.findClosestByRange(FIND_STRUCTURES, {filter: (structure) => {return (structure.structureType == STRUCTURE_WALL ||
                                                                                                                        structure.structureType == STRUCTURE_RAMPART) && (structure.hits < 2000000);}});
                    if(wallToRepair)
                    {
                        if (creep.repair(wallToRepair) == ERR_NOT_IN_RANGE)
                        {
                            creep.moveTo(wallToRepair, {visualizePathStyle: {stroke: '#ffffff'}});
                            creep.say('üîß');
                        }
                    }
                    else
                    {
                    creep.memory.workerMode = 0;
                    }
				}
				else
				{
					creep.memory.workerMode = 0;
				}
            break;
        }
	}
};
module.exports = roleRepairer;
